<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--Data marked TEXT_HERE, INLET_TYPE, OUTLET_TYPE, ARG_NAME and ARG_TYPE need to be filled in-->
<c74object name="j.cue" module="" category="Jamoma">
	<digest>
		Store and recall the state of several models	</digest>
	<description>
		j.cue allows to store states of multiple models within a patch and offers various options to manage, recall or sequence these cue as  needed.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Jamoma
		</metadata>
		<metadata name="tag">
			cue
		</metadata>
		<metadata name="tag">
			preset management
		</metadata>
		<metadata name="tag">
			saving
		</metadata>
		<metadata name="tag">
			Jamoma
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="OUTLET_TYPE">
			<digest>
				cue output
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
		<outlet id="1" type="OUTLET_TYPE">
			<digest>
				dumpout
			</digest>
			<description>
				TEXT_HERE
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg id="0" name="OBJARG_NAME" type="OBJARG_TYPE" optional="0">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method>
		<!-- <method name="append">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method> -->
		<method name="clear">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Clear content of j.cue
			</digest>
			<description>
				Clear the various cues stored in j.cue
			</description>
		</method>
		<method name="copy">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Copy a cue to another position in list of cues
			</digest>
			<description>
				The 'copy' message followed by a cue name or index and an index will copy the specified cue to a new position in j.cue list of cues
			</description>
		</method>
		<method name="(mouse)">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				TEXT_HERE
			</description>
		</method>
		<method name="edit">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Open one or all cues as text in j.cue editor window
			</digest>
			<description>
				The message 'edit' followed by an optional cue name will respectively open the relevant cue in j.cue's editor window. Without any argument, 'edit' will open all cues stored in j.cue
			</description>
		</method>
		<method name="dump">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Dump j.cue attributes value in j.cue right-most output
			</digest>
			<description>
				Dump j.cue attributes value in j.cue right-most output
			</description>
		</method>
		<method name="interpolate">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Interpolate between two cues
			</digest>
			<description>
				The message 'interpolate' followed by 2 cue names or indexs and a ratio value (between 0 and 1) will interpolate between all j.parameters' value
			</description>
		</method>
		<method name="move">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Move a cue to a specified index
			</digest>
			<description>
				The message 'move' followed by a cue name or index and a index will move this specified cue to a new position
			</description>
		</method>
		<method name="output">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Output a cue content out of the left output
			</digest>
			<description>
				The message 'output' followed by a node address in the namespace (be it a model address or one of its parameters) will output its value(s) out of j.cue's left output
			</description>
		</method>
		<method name="namespace/select">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Select an address within an indentified namespace
			</digest>
			<description>
				When using j.cue along with j.namespace, the message 'namespace/select' will select one or many addresses specified as argument in the namespace 
			</description>
		</method>
		<method name="namespace/unselect">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Unselect an address within an indentified namespace
			</digest>
			<description>
				When using j.cue along with j.namespace, the message 'namespace/unselect' will unselect one or many addresses specified as argument in the namespace
			</description>
		</method>
		<method name="namespace/grab">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Select the namespace of an existing cue
			</digest>
			<description>
				When using j.cue along with j.namespace, the message 'namespace/grab' will select addresses in an existing cue specified as argument
			</description>
		</method>
		<method name="mix">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Mix between two or more cues
			</digest>
			<description>
				The message 'mix' followed by pairs of cue name or index and amount value will mix between multiple cue's parameters value
			</description>
		</method>
		<method name="read">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Read a list of cues stored in a text file
			</digest>
			<description>
				The message 'read' followed by an optional path to disk will open a list of cues stored in a text file
			</description>
		</method>
		<method name="read/again">
			<arglist />
			<digest>
				Re-read a list of cues stored in a text file
			</digest>
			<description>
				The message 'read/again' followed by an optional path to disk will re-open a list of cues stored in a text file
			</description>
		</method>
		<method name="recall">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Recall the state of many models
			</digest>
			<description>
				The message 'recall' followed by a cue name or index will set models values back to a previously saved state
			</description>
		</method>
		<method name="optimize">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Remove redundant values between consecutive cues
			</digest>
			<description>
				The 'optimize' message allows to filter out and delete redundant values between consecutive cues
			</description>
		</method>
		<method name="store">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Store the state of one or many models in a cue
			</digest>
			<description>
				The message 'store' followed by an optional cue name or index will store some models parameters' value in j.cue
			</description>
		</method>
		<method name="order">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Order of the cues stored in j.cue
			</digest>
			<description>
				The 'order' attribute follwoed by an optionnal list of cue name or index will reorder the spcified cues with j.cue list of cues
			</description>
		</method>
		<method name="remove">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Remove a cue from j.cue's list of cue
			</digest>
			<description>
				The message 'remove' followed by a cue name or index will remove the specified state from j.cue
			</description>
		</method>
		<method name="rename">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Rename of cue
			</digest>
			<description>
				The message 'rename' followed by a cue name or index and new name will rename the specified state from j.cue
			</description>
		</method>
		<method name="write">
			<arglist>
				<arg name="ARG_NAME_0" type="list" optional="0" />
			</arglist>
			<digest>
				Write j.cue's list of cue as a text file
			</digest>
			<description>
				The message 'write' followed by an optional file path will write j.cue's list of cue as a text file
			</description>
		</method>
		<method name="write/again">
			<arglist />
			<digest>
				Write again j.cue's list of cues as a text file
			</digest>
			<description>
				The message 'write/again' will re-write j.cue's list of cue as a text file
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="address" get="1" set="1" type="symbol" size="1">
			<digest>
				Select a node in the namespace to store values
			</digest>
			<description>
				Select a node in the namespace to store and recall values. When setting the address attribute, all models and below will get their state stored.
			</description>
		</attribute>
		<attribute name="current" get="1" set="1" type="symbol" size="1">
			<digest>
				Current cue in j.cue
			</digest>
			<description>
				The 'current' attribute define the lastly stored, recalled or updated cue in j.cue
			</description>
		</attribute>
		<attribute name="current/description" get="1" set="1" type="atom" size="1">
			<digest>
				Description of the current cue
			</digest>
			<description>
				The 'current/description' attribute allows to get or set a description of the current cue
			</description>
		</attribute>
		<attribute name="current/position" get="1" set="1" type="int" size="1">
			<digest>
				Position of the current cue
			</digest>
			<description>
				The 'current/position' attribute allows to get or set the position of the current cue
			</description>
		</attribute>
		<attribute name="current/ramp" get="1" set="1" type="atom" size="1">
			<digest>
				Ramp time of the current cue
			</digest>
			<description>
				The 'current/ramp' attribute alows to get or set a ramp time length specified as milliseconds for the current cue
			</description>
		</attribute>
		<attribute name="names" get="0" set="1" type="atom" size="1">
			<digest>
				Get the names of the cues stored in j.cue
			</digest>
			<description>
				The 'names' attribute allows to get a list of all cues stored in j.cue
			</description>
		</attribute>
		<attribute name="namespace" get="1" set="1" type="symbol" size="1">
			<digest>
				Bind to a specific namespace
			</digest>
			<description>
				The 'namespace' attribute followed by a j.namespace's named selection will set j.cue to use this namespace selection
			</description>
		</attribute>
		<attribute name="relative" get="1" set="1" type="boolean" size="1">
			<digest>
				Automatically set the address attribute to the containing model address
			</digest>
			<description>
				Automatically set the address attribute to the containing model address. Note that setting the address attribute will overide the relative state
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example caption="" img="" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="j.preset"/>
		<seealso name="j.namespace"/>
		<seealso name="pattrstorage"/>
	</seealsolist>
</c74object>
